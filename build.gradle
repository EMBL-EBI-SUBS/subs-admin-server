plugins {
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'java'
    id 'org.hidetake.ssh' version '2.10.1'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
apply plugin: 'application'

group = 'uk.ac.ebi.subs'
version = '1.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
mainClassName = "uk.ac.ebi.subs.admin.USIAdminApplication"

repositories {
    mavenCentral()
}

ext {
    set('springBootAdminVersion', "2.1.5")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'de.codecentric:spring-boot-admin-starter-server'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
    }
}

bootJar {
    launchScript()
}

//processResources {
//    filesMatching('application.yml') {
//        expand(project.properties)
//    }
//}

ext.gradle_env = hasProperty('env') ? env : 'dev'

remotes {
    dev {
        role('dev')
        host = project.hasProperty(project.name + "DevDeployTarget") ? getProperty(project.name + "DevDeployTarget") : 'localhost'
    }
    test {
        role('test')
        host = project.hasProperty(project.name + "TestDeployTarget") ? getProperty(project.name + "TestDeployTarget") : 'localhost'
    }
    prod {
        role('prod')
        host = project.hasProperty(project.name + "ProdDeployTarget") ? getProperty(project.name + "ProdDeployTarget") : 'localhost'
    }
}

ssh.settings {
    user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
    ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
    ssh.settings.passphrase = sshPassphrase
}

task deployJar(dependsOn: 'assemble') {
    doLast {
        sshRun()
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

task testSsh() {
    doLast {
        sshTestRun()
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

private Object sshRun() {
    ssh.run {
        session(remotes.role(gradle_env)) {
            execute "/homes/sub_adm/create_dirs.sh $gradle_env $project.name", ignoreError: false
            def jarFileName = project.name + "-"  + project.version + "." + System.currentTimeMillis() + ".jar"
            File jarDeployFile = new File("/data/$remote.name/$project.name/jar",jarFileName)
            File jarDeployDir = jarDeployFile.getParentFile()
            println "Uploading jar $jar.archivePath.name to $jarDeployFile.absolutePath  area on $remote"
            put from: jar.archivePath.absolutePath, into: jarDeployFile.absolutePath
            println "creating symbolic link to $jar.archiveName"
            def result = execute "ln -s -f $jarDeployFile.absolutePath $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
            println result
            println "updating permissions of $jarDeployDir/$jar.archiveName"
            execute "chmod u+x $jarDeployDir/*", ignoreError: false
        }
    }
}

private Object sshTestRun(){
    ssh.run {
        session(remotes.role(gradle_env)){
            println "started ssh session to $remote"
        }
    }
}
